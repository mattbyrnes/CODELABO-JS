{"version":3,"sources":["components/ProjectList.js","components/App.js","serviceWorker.js","index.js"],"names":["ProjectList","props","listofProjects","list","map","item","console","log","react_default","a","createElement","onClick","clickhandler","_id","className","id","name","require","App","_Component","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","updateProject","value","axios","put","concat","state","selectedProject","then","res","updateHTML","html","updateCSS","css","updateJS","javascript","getProject","Id","get","setState","data","catch","err","projectList","preview","inherits","createClass","key","getAllProjects","_this2","_this3","react_codemirror2","options","mode","lineNumbers","onChange","editor","theme","title","components_ProjectList","Component","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mXAkBeA,EAhBK,SAACC,GACpB,IAAMC,EAAiBD,EAAME,KAAKC,IAAI,SAACC,GAEtC,OADAC,QAAQC,IAAIF,GAEXG,EAAAC,EAAAC,cAAA,UAAQC,QAAS,kBAAMV,EAAMW,aAAaP,EAAKQ,MAC/CC,UAAU,eAAeC,GAAIV,EAAKQ,KAAMR,EAAKW,KAC7CR,EAAAC,EAAAC,cAAA,UAAQI,UAAU,WAAlB,QAGF,OACCN,EAAAC,EAAAC,cAAA,WACER,ICLJe,EAAQ,IACRA,EAAQ,IACRA,EAAQ,IAED,IA2JQC,EA3Jf,SAAAC,GAEC,SAAAD,EAAYjB,GAAO,IAAAmB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAClBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMtB,KAiBP0B,cAAgB,SAAAC,GACfC,IAAMC,IAAN,gBAAAC,OAA0BX,EAAKY,MAAMC,gBAAgBpB,KAAO,CAAEG,KAAMY,IAClEM,KAAK,SAAAC,GAAG,OAAI7B,QAAQC,IAAI4B,MApBRf,EAsBnBgB,WAAa,SAAAR,GACZC,IAAMC,IAAN,gBAAAC,OAA0BX,EAAKY,MAAMC,gBAAgBpB,KAAO,CAAEwB,KAAMT,IAClEM,KAAK,SAAAC,GAAG,OAAI7B,QAAQC,IAAI4B,MAxBRf,EA0BnBkB,UAAY,SAAAV,GACXC,IAAMC,IAAN,gBAAAC,OAA0BX,EAAKY,MAAMC,gBAAgBpB,KAAO,CAAE0B,IAAKX,IACjEM,KAAK,SAAAC,GAAG,OAAI7B,QAAQC,IAAI4B,MA5BRf,EA8BnBoB,SAAW,SAAAZ,GACVC,IAAMC,IAAN,gBAAAC,OAA0BX,EAAKY,MAAMC,gBAAgBpB,KAAO,CAAE4B,WAAYb,IACxEM,KAAK,SAAAC,GAAG,OAAI7B,QAAQC,IAAI4B,MAhCRf,EAoCnBsB,WAAa,SAAAC,GACZd,IAAMe,IAAN,gBAAAb,OAA0BY,IACxBT,KAAK,SAAC7B,GACNe,EAAKyB,SAAS,CACbZ,gBAAiB5B,EAAKyC,SAGvBC,MAAM,SAAUC,GAChB1C,QAAQC,IAAIyC,MA1Cd5B,EAAKY,MAAQ,CACZiB,YAAa,GACbC,QAAS,GACTb,KAAM,GACNJ,gBAAiB,IANAb,EAFpB,OAAAC,OAAA8B,EAAA,EAAA9B,CAAAH,EAAAC,GAAAE,OAAA+B,EAAA,EAAA/B,CAAAH,EAAA,EAAAmC,IAAA,oBAAAzB,MAAA,WAaEL,KAAK+B,iBACL/B,KAAKmB,aACLnB,KAAKI,kBAfP,CAAA0B,IAAA,iBAAAzB,MAAA,WAmDkB,IAAA2B,EAAAhC,KAChBM,IAAMe,IAAN,gBACEV,KAAK,SAAC/B,GACNoD,EAAKV,SAAS,CACbI,YAAa9C,EAAK2C,SAGnBC,MAAM,SAAUC,GAChB1C,QAAQC,IAAIyC,OA3DhB,CAAAK,IAAA,SAAAzB,MAAA,WA+DU,IAAA4B,EAAAjC,KACR,OACCf,EAAAC,EAAAC,cAAA,eACCF,EAAAC,EAAAC,cAAA,YACCF,EAAAC,EAAAC,cAAA,OAAKI,UAAU,YACdN,EAAAC,EAAAC,cAAA,OAAKI,UAAU,eACdN,EAAAC,EAAAC,cAAC+C,EAAA,aAAD,CACCzC,KAAK,QACLY,MAAOL,KAAKS,MAAMC,gBAAgBjB,KAClC0C,QAAS,CACRC,KAAM,YACNC,aAAa,GAEdC,SAAU,SAACC,EAAQhB,EAAMlB,GACxB4B,EAAK7B,cAAcC,OAItBpB,EAAAC,EAAAC,cAAA,OAAKK,GAAG,cACPP,EAAAC,EAAAC,cAAC+C,EAAA,aAAD,CACC7B,MAAOL,KAAKS,MAAMC,gBAAgBI,KAClCqB,QAAS,CACRC,KAAM,MACNI,MAAO,UACPH,aAAa,GAEdC,SAAU,SAACC,EAAQhB,EAAMlB,GACxB4B,EAAKpB,WAAWR,OAInBpB,EAAAC,EAAAC,cAAA,OAAKK,GAAG,aACPP,EAAAC,EAAAC,cAAC+C,EAAA,aAAD,CACC7B,MAAOL,KAAKS,MAAMC,gBAAgBM,IAClCmB,QAAS,CACRC,KAAM,MACNI,MAAO,UACPH,aAAa,GAEdC,SAAU,SAACC,EAAQhB,EAAMlB,GACxB4B,EAAKlB,UAAUV,OAIlBpB,EAAAC,EAAAC,cAAA,OAAKK,GAAG,YACPP,EAAAC,EAAAC,cAAC+C,EAAA,aAAD,CACC7B,MAAOL,KAAKS,MAAMC,gBAAgBQ,WAClCiB,QAAS,CACRC,KAAM,aACNI,MAAO,UACPH,aAAa,GAEdC,SAAU,SAACC,EAAQhB,EAAMlB,GACxB4B,EAAKhB,SAASZ,QAMlBpB,EAAAC,EAAAC,cAAA,OAAKI,UAAU,eACdN,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,OAAKI,UAAU,UACdN,EAAAC,EAAAC,cAAA,UAAQsD,MAAM,UAAUjD,GAAG,WAC1BP,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,gCAOJF,EAAAC,EAAAC,cAAA,UAAQK,GAAG,QAAQD,UAAU,gBAA7B,eAEAN,EAAAC,EAAAC,cAAA,OAAKK,GAAG,UAAUD,UAAU,SAC3BN,EAAAC,EAAAC,cAAA,OAAKI,UAAU,iBACdN,EAAAC,EAAAC,cAAA,QAAMI,UAAU,SAAhB,QACAN,EAAAC,EAAAC,cAAA,yBAAoBF,EAAAC,EAAAC,cAAA,WAAMF,EAAAC,EAAAC,cAAA,WAC1BF,EAAAC,EAAAC,cAAA,OAAKK,GAAG,eACPP,EAAAC,EAAAC,cAACuD,EAAD,CACC9D,KAAMoB,KAAKS,MAAMiB,YACjBrC,aAAcW,KAAKmB,qBA/I3BxB,EAAA,CAAyBgD,aCALC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjE,EAAAC,EAAAC,cAACgE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7C,KAAK,SAAA8C,GACjCA,EAAaC","file":"static/js/main.5ea22f98.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst ProjectList = (props) => {\r\n\tconst listofProjects = props.list.map((item) => {\r\n\t\tconsole.log(item)\r\n\t\treturn (\r\n\t\t\t<button onClick={() => props.clickhandler(item._id)} \r\n\t\t\tclassName=\"open-project\" id={item._id}>{item.name} \r\n\t\t\t<button className=\"del-btn\">x</button></button>\r\n\t\t)\r\n\t})\r\n\treturn (\r\n\t\t<div >\r\n\t\t\t{listofProjects}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default ProjectList;","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport '../codemirror.css';\r\nimport '../monokai.css';\r\nimport '../reset.css';\r\nimport '../style.css';\r\nimport { UnControlled as CodeMirror } from 'react-codemirror2';\r\nimport ProjectList from './ProjectList';\r\nrequire('codemirror/mode/xml/xml');\r\nrequire('codemirror/mode/css/css');\r\nrequire('codemirror/mode/javascript/javascript');\r\n\r\nexport class App extends Component {\r\n\r\n\tconstructor(props) {\r\n\t\tsuper(props)\r\n\t\tthis.state = {\r\n\t\t\tprojectList: [],\r\n\t\t\tpreview: [],\r\n\t\t\thtml: [],\r\n\t\t\tselectedProject: {}\r\n\t\t}\r\n\t};\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.getAllProjects();\r\n\t\tthis.getProject();\r\n\t\tthis.updateProject();\r\n\t\t// this.updatePreview();\r\n\t}\r\n\r\n\t// Update Functions\r\n\tupdateProject = value => {\r\n\t\taxios.put(`/api/project/${this.state.selectedProject._id}`, { name: value })\r\n\t\t\t.then(res => console.log(res))\r\n\t}\r\n\tupdateHTML = value => {\r\n\t\taxios.put(`/api/project/${this.state.selectedProject._id}`, { html: value })\r\n\t\t\t.then(res => console.log(res))\r\n\t}\r\n\tupdateCSS = value => {\r\n\t\taxios.put(`/api/project/${this.state.selectedProject._id}`, { css: value })\r\n\t\t\t.then(res => console.log(res))\r\n\t}\r\n\tupdateJS = value => {\r\n\t\taxios.put(`/api/project/${this.state.selectedProject._id}`, { javascript: value })\r\n\t\t\t.then(res => console.log(res))\r\n\t}\r\n\r\n\t// Get Selected Project\r\n\tgetProject = Id => {\r\n\t\taxios.get(`/api/project/${Id}`)\r\n\t\t\t.then((item) => {\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tselectedProject: item.data\r\n\t\t\t\t})\r\n\t\t\t})\r\n\t\t\t.catch(function (err) {\r\n\t\t\t\tconsole.log(err)\r\n\t\t\t})\r\n\t}\r\n\r\n\t// Get All Projects\r\n\tgetAllProjects() {\r\n\t\taxios.get(`/api/project`)\r\n\t\t\t.then((list) => {\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tprojectList: list.data\r\n\t\t\t\t})\r\n\t\t\t})\r\n\t\t\t.catch(function (err) {\r\n\t\t\t\tconsole.log(err)\r\n\t\t\t})\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<section>\r\n\t\t\t\t<form>\r\n\t\t\t\t\t<div className=\"edit-col\">\r\n\t\t\t\t\t\t<div className=\"title-input\">\r\n\t\t\t\t\t\t\t<CodeMirror\r\n\t\t\t\t\t\t\t\tname=\"title\"\r\n\t\t\t\t\t\t\t\tvalue={this.state.selectedProject.name}\r\n\t\t\t\t\t\t\t\toptions={{\r\n\t\t\t\t\t\t\t\t\tmode: 'text/html',\r\n\t\t\t\t\t\t\t\t\tlineNumbers: false\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\tonChange={(editor, data, value) => {\r\n\t\t\t\t\t\t\t\t\tthis.updateProject(value)\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div id=\"htmlEditor\">\r\n\t\t\t\t\t\t\t<CodeMirror\r\n\t\t\t\t\t\t\t\tvalue={this.state.selectedProject.html}\r\n\t\t\t\t\t\t\t\toptions={{\r\n\t\t\t\t\t\t\t\t\tmode: 'xml',\r\n\t\t\t\t\t\t\t\t\ttheme: 'monokai',\r\n\t\t\t\t\t\t\t\t\tlineNumbers: true\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\tonChange={(editor, data, value) => {\r\n\t\t\t\t\t\t\t\t\tthis.updateHTML(value)\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div id=\"cssEditor\">\r\n\t\t\t\t\t\t\t<CodeMirror\r\n\t\t\t\t\t\t\t\tvalue={this.state.selectedProject.css}\r\n\t\t\t\t\t\t\t\toptions={{\r\n\t\t\t\t\t\t\t\t\tmode: 'css',\r\n\t\t\t\t\t\t\t\t\ttheme: 'monokai',\r\n\t\t\t\t\t\t\t\t\tlineNumbers: true\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\tonChange={(editor, data, value) => {\r\n\t\t\t\t\t\t\t\t\tthis.updateCSS(value)\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div id=\"jsEditor\">\r\n\t\t\t\t\t\t\t<CodeMirror\r\n\t\t\t\t\t\t\t\tvalue={this.state.selectedProject.javascript}\r\n\t\t\t\t\t\t\t\toptions={{\r\n\t\t\t\t\t\t\t\t\tmode: 'javascript',\r\n\t\t\t\t\t\t\t\t\ttheme: 'monokai',\r\n\t\t\t\t\t\t\t\t\tlineNumbers: true\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\tonChange={(editor, data, value) => {\r\n\t\t\t\t\t\t\t\t\tthis.updateJS(value)\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t<div className=\"preview-col\">\r\n\t\t\t\t\t\t<label>Preview</label>\r\n\t\t\t\t\t\t<div className=\"device\">\r\n\t\t\t\t\t\t\t<iframe title=\"preview\" id=\"preview\">\r\n\t\t\t\t\t\t\t\t<h1>Hello!</h1>\r\n\t\t\t\t\t\t\t\t<p>Will this work?</p>\r\n\t\t\t\t\t\t\t</iframe>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t</form>\r\n\r\n\t\t\t\t<button id=\"myBtn\" className=\"projects-btn\">My Projects</button>\r\n\r\n\t\t\t\t<div id=\"myModal\" className=\"modal\">\r\n\t\t\t\t\t<div className=\"modal-content\">\r\n\t\t\t\t\t\t<span className=\"close\">&times;</span>\r\n\t\t\t\t\t\t<h2>My Projects</h2><br /><br />\r\n\t\t\t\t\t\t<div id=\"projectlist\">\r\n\t\t\t\t\t\t\t<ProjectList\r\n\t\t\t\t\t\t\t\tlist={this.state.projectList}\r\n\t\t\t\t\t\t\t\tclickhandler={this.getProject}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t</section>\r\n\t\t)\r\n\t}\r\n\r\n}\r\n\r\nexport default App;\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}